// Code generated by mockery v2.42.2. DO NOT EDIT.

package serviceaccount

import mock "github.com/stretchr/testify/mock"

// Mockmanager is an autogenerated mock type for the manager type
type Mockmanager struct {
	mock.Mock
}

type Mockmanager_Expecter struct {
	mock *mock.Mock
}

func (_m *Mockmanager) EXPECT() *Mockmanager_Expecter {
	return &Mockmanager_Expecter{mock: &_m.Mock}
}

// CreateServiceAccount provides a mock function with given fields: consumer, params
func (_m *Mockmanager) CreateServiceAccount(consumer string, params []string) (map[string]string, error) {
	ret := _m.Called(consumer, params)

	if len(ret) == 0 {
		panic("no return value specified for CreateServiceAccount")
	}

	var r0 map[string]string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, []string) (map[string]string, error)); ok {
		return rf(consumer, params)
	}
	if rf, ok := ret.Get(0).(func(string, []string) map[string]string); ok {
		r0 = rf(consumer, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string, []string) error); ok {
		r1 = rf(consumer, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Mockmanager_CreateServiceAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateServiceAccount'
type Mockmanager_CreateServiceAccount_Call struct {
	*mock.Call
}

// CreateServiceAccount is a helper method to define mock.On call
//   - consumer string
//   - params []string
func (_e *Mockmanager_Expecter) CreateServiceAccount(consumer interface{}, params interface{}) *Mockmanager_CreateServiceAccount_Call {
	return &Mockmanager_CreateServiceAccount_Call{Call: _e.mock.On("CreateServiceAccount", consumer, params)}
}

func (_c *Mockmanager_CreateServiceAccount_Call) Run(run func(consumer string, params []string)) *Mockmanager_CreateServiceAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]string))
	})
	return _c
}

func (_c *Mockmanager_CreateServiceAccount_Call) Return(credentials map[string]string, err error) *Mockmanager_CreateServiceAccount_Call {
	_c.Call.Return(credentials, err)
	return _c
}

func (_c *Mockmanager_CreateServiceAccount_Call) RunAndReturn(run func(string, []string) (map[string]string, error)) *Mockmanager_CreateServiceAccount_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteServiceAccount provides a mock function with given fields: consumer
func (_m *Mockmanager) DeleteServiceAccount(consumer string) error {
	ret := _m.Called(consumer)

	if len(ret) == 0 {
		panic("no return value specified for DeleteServiceAccount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(consumer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Mockmanager_DeleteServiceAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteServiceAccount'
type Mockmanager_DeleteServiceAccount_Call struct {
	*mock.Call
}

// DeleteServiceAccount is a helper method to define mock.On call
//   - consumer string
func (_e *Mockmanager_Expecter) DeleteServiceAccount(consumer interface{}) *Mockmanager_DeleteServiceAccount_Call {
	return &Mockmanager_DeleteServiceAccount_Call{Call: _e.mock.On("DeleteServiceAccount", consumer)}
}

func (_c *Mockmanager_DeleteServiceAccount_Call) Run(run func(consumer string)) *Mockmanager_DeleteServiceAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Mockmanager_DeleteServiceAccount_Call) Return(_a0 error) *Mockmanager_DeleteServiceAccount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Mockmanager_DeleteServiceAccount_Call) RunAndReturn(run func(string) error) *Mockmanager_DeleteServiceAccount_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockmanager creates a new instance of Mockmanager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockmanager(t interface {
	mock.TestingT
	Cleanup(func())
}) *Mockmanager {
	mock := &Mockmanager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
